// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"context"
	"fmt"
	"reflect"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Message
type Error struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewError() *Error {
	return &Error{}
}

func (p *Error) GetMessage() string {
	return p.Message
}
func (p *Error) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Error) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *Error) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Error"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Error) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *Error) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Error(%+v)", *p)
}

func (p *Error) Error() string {
	return p.String()
}

type I2C interface {
	String(ctx context.Context) (r string, err error)
	// Parameters:
	//  - Addr
	//  - W
	//  - Length
	Tx(ctx context.Context, addr int16, w []byte, length int32) (r []byte, err error)
	// Parameters:
	//  - MicroHertz
	SetSpeed(ctx context.Context, microHertz int64) (err error)
}

type I2CClient struct {
	c thrift.TClient
}

func NewI2CClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *I2CClient {
	return &I2CClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewI2CClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *I2CClient {
	return &I2CClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewI2CClient(c thrift.TClient) *I2CClient {
	return &I2CClient{
		c: c,
	}
}

func (p *I2CClient) Client_() thrift.TClient {
	return p.c
}
func (p *I2CClient) String(ctx context.Context) (r string, err error) {
	var _args0 I2CStringArgs
	var _result1 I2CStringResult
	if err = p.Client_().Call(ctx, "String", &_args0, &_result1); err != nil {
		return
	}
	return _result1.GetSuccess(), nil
}

// Parameters:
//  - Addr
//  - W
//  - Length
func (p *I2CClient) Tx(ctx context.Context, addr int16, w []byte, length int32) (r []byte, err error) {
	var _args2 I2CTxArgs
	_args2.Addr = addr
	_args2.W = w
	_args2.Length = length
	var _result3 I2CTxResult
	if err = p.Client_().Call(ctx, "Tx", &_args2, &_result3); err != nil {
		return
	}
	switch {
	case _result3.Err1 != nil:
		return r, _result3.Err1
	}

	return _result3.GetSuccess(), nil
}

// Parameters:
//  - MicroHertz
func (p *I2CClient) SetSpeed(ctx context.Context, microHertz int64) (err error) {
	var _args4 I2CSetSpeedArgs
	_args4.MicroHertz = microHertz
	var _result5 I2CSetSpeedResult
	if err = p.Client_().Call(ctx, "SetSpeed", &_args4, &_result5); err != nil {
		return
	}
	switch {
	case _result5.Err1 != nil:
		return _result5.Err1
	}

	return nil
}

type I2CProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      I2C
}

func (p *I2CProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *I2CProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *I2CProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewI2CProcessor(handler I2C) *I2CProcessor {

	self6 := &I2CProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self6.processorMap["String"] = &i2CProcessorString{handler: handler}
	self6.processorMap["Tx"] = &i2CProcessorTx{handler: handler}
	self6.processorMap["SetSpeed"] = &i2CProcessorSetSpeed{handler: handler}
	return self6
}

func (p *I2CProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x7.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x7

}

type i2CProcessorString struct {
	handler I2C
}

func (p *i2CProcessorString) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := I2CStringArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("String", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := I2CStringResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.String(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing String: "+err2.Error())
		oprot.WriteMessageBegin("String", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("String", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type i2CProcessorTx struct {
	handler I2C
}

func (p *i2CProcessorTx) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := I2CTxArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Tx", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := I2CTxResult{}
	var retval []byte
	var err2 error
	if retval, err2 = p.handler.Tx(ctx, args.Addr, args.W, args.Length); err2 != nil {
		switch v := err2.(type) {
		case *Error:
			result.Err1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Tx: "+err2.Error())
			oprot.WriteMessageBegin("Tx", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Tx", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type i2CProcessorSetSpeed struct {
	handler I2C
}

func (p *i2CProcessorSetSpeed) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := I2CSetSpeedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SetSpeed", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := I2CSetSpeedResult{}
	var err2 error
	if err2 = p.handler.SetSpeed(ctx, args.MicroHertz); err2 != nil {
		switch v := err2.(type) {
		case *Error:
			result.Err1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetSpeed: "+err2.Error())
			oprot.WriteMessageBegin("SetSpeed", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("SetSpeed", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type I2CStringArgs struct {
}

func NewI2CStringArgs() *I2CStringArgs {
	return &I2CStringArgs{}
}

func (p *I2CStringArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *I2CStringArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("String_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *I2CStringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("I2CStringArgs(%+v)", *p)
}

// Attributes:
//  - Success
type I2CStringResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewI2CStringResult() *I2CStringResult {
	return &I2CStringResult{}
}

var I2CStringResult_Success_DEFAULT string

func (p *I2CStringResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return I2CStringResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *I2CStringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *I2CStringResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *I2CStringResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *I2CStringResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("String_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *I2CStringResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *I2CStringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("I2CStringResult(%+v)", *p)
}

// Attributes:
//  - Addr
//  - W
//  - Length
type I2CTxArgs struct {
	Addr   int16  `thrift:"addr,1" db:"addr" json:"addr"`
	W      []byte `thrift:"w,2" db:"w" json:"w"`
	Length int32  `thrift:"length,3" db:"length" json:"length"`
}

func NewI2CTxArgs() *I2CTxArgs {
	return &I2CTxArgs{}
}

func (p *I2CTxArgs) GetAddr() int16 {
	return p.Addr
}

func (p *I2CTxArgs) GetW() []byte {
	return p.W
}

func (p *I2CTxArgs) GetLength() int32 {
	return p.Length
}
func (p *I2CTxArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *I2CTxArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Addr = v
	}
	return nil
}

func (p *I2CTxArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.W = v
	}
	return nil
}

func (p *I2CTxArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Length = v
	}
	return nil
}

func (p *I2CTxArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Tx_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *I2CTxArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addr", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addr: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Addr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addr (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addr: ", p), err)
	}
	return err
}

func (p *I2CTxArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("w", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:w: ", p), err)
	}
	if err := oprot.WriteBinary(p.W); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.w (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:w: ", p), err)
	}
	return err
}

func (p *I2CTxArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("length", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:length: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Length)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.length (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:length: ", p), err)
	}
	return err
}

func (p *I2CTxArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("I2CTxArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err1
type I2CTxResult struct {
	Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
	Err1    *Error `thrift:"err1,1" db:"err1" json:"err1,omitempty"`
}

func NewI2CTxResult() *I2CTxResult {
	return &I2CTxResult{}
}

var I2CTxResult_Success_DEFAULT []byte

func (p *I2CTxResult) GetSuccess() []byte {
	return p.Success
}

var I2CTxResult_Err1_DEFAULT *Error

func (p *I2CTxResult) GetErr1() *Error {
	if !p.IsSetErr1() {
		return I2CTxResult_Err1_DEFAULT
	}
	return p.Err1
}
func (p *I2CTxResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *I2CTxResult) IsSetErr1() bool {
	return p.Err1 != nil
}

func (p *I2CTxResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *I2CTxResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *I2CTxResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err1 = &Error{}
	if err := p.Err1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err1), err)
	}
	return nil
}

func (p *I2CTxResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Tx_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *I2CTxResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *I2CTxResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr1() {
		if err := oprot.WriteFieldBegin("err1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err1: ", p), err)
		}
		if err := p.Err1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err1: ", p), err)
		}
	}
	return err
}

func (p *I2CTxResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("I2CTxResult(%+v)", *p)
}

// Attributes:
//  - MicroHertz
type I2CSetSpeedArgs struct {
	MicroHertz int64 `thrift:"microHertz,1" db:"microHertz" json:"microHertz"`
}

func NewI2CSetSpeedArgs() *I2CSetSpeedArgs {
	return &I2CSetSpeedArgs{}
}

func (p *I2CSetSpeedArgs) GetMicroHertz() int64 {
	return p.MicroHertz
}
func (p *I2CSetSpeedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *I2CSetSpeedArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MicroHertz = v
	}
	return nil
}

func (p *I2CSetSpeedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetSpeed_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *I2CSetSpeedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("microHertz", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:microHertz: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MicroHertz)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.microHertz (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:microHertz: ", p), err)
	}
	return err
}

func (p *I2CSetSpeedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("I2CSetSpeedArgs(%+v)", *p)
}

// Attributes:
//  - Err1
type I2CSetSpeedResult struct {
	Err1 *Error `thrift:"err1,1" db:"err1" json:"err1,omitempty"`
}

func NewI2CSetSpeedResult() *I2CSetSpeedResult {
	return &I2CSetSpeedResult{}
}

var I2CSetSpeedResult_Err1_DEFAULT *Error

func (p *I2CSetSpeedResult) GetErr1() *Error {
	if !p.IsSetErr1() {
		return I2CSetSpeedResult_Err1_DEFAULT
	}
	return p.Err1
}
func (p *I2CSetSpeedResult) IsSetErr1() bool {
	return p.Err1 != nil
}

func (p *I2CSetSpeedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *I2CSetSpeedResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err1 = &Error{}
	if err := p.Err1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err1), err)
	}
	return nil
}

func (p *I2CSetSpeedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetSpeed_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *I2CSetSpeedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr1() {
		if err := oprot.WriteFieldBegin("err1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err1: ", p), err)
		}
		if err := p.Err1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err1: ", p), err)
		}
	}
	return err
}

func (p *I2CSetSpeedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("I2CSetSpeedResult(%+v)", *p)
}
